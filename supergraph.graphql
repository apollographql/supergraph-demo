schema
  @core(feature: "https://specs.apollo.dev/core/v0.1"),
  @core(feature: "https://specs.apollo.dev/join/v0.1")
{
  query: Query
}

directive @core(feature: String!) repeatable on SCHEMA

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet) on FIELD_DEFINITION

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on OBJECT | INTERFACE

directive @join__owner(graph: join__Graph!) on OBJECT | INTERFACE

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

type Address
  @join__owner(graph: LOCATIONS)
  @join__type(graph: LOCATIONS, key: "id")
  @join__type(graph: ORDERS, key: "id")
  @join__type(graph: INVENTORY, key: "id")
  @join__type(graph: CUSTOMERS, key: "id")
{
  id: ID! @join__field(graph: LOCATIONS)
  address1: String @join__field(graph: LOCATIONS)
  address2: String @join__field(graph: LOCATIONS)
  city: String @join__field(graph: LOCATIONS)
  country: String @join__field(graph: LOCATIONS)
  countryCode: COUNTRY_CODE @join__field(graph: LOCATIONS)
  firstName: String @join__field(graph: LOCATIONS)
  lastName: String @join__field(graph: LOCATIONS)
  formatted(withCompany: Boolean, withName: Boolean): [String!]! @join__field(graph: LOCATIONS)
}

type Aisle {
  id: ID!
  bins: Bin
}

type ApproxLocation
  @join__owner(graph: INVENTORY)
  @join__type(graph: INVENTORY, key: "warehouse{id}")
  @join__type(graph: ORDERS, key: "warehouse{id}")
{
  warehouse: Warehouse @join__field(graph: INVENTORY)
  aisle: Int @join__field(graph: INVENTORY)
  bin: Int @join__field(graph: INVENTORY)
  quantityOnHand: Int @join__field(graph: INVENTORY)
}

type Bin {
  shelfNumber: Int
  products: ProductInventory
}

enum CANCELLED_REASON {
  CUSTOMER
  DECLINED
  FRAUD
  NO_INVENTORY
  OTHER
}

"""
https://shopify.dev/docs/storefront-api/reference/common-objects/countrycode
"""
enum COUNTRY_CODE {
  US
}

enum CURRENCY_CODE {
  USD
}

"""
This is an Entity, docs:https://www.apollographql.com/docs/federation/entities/
You will need to define a __resolveReference resolver for the type you define, docs: https://www.apollographql.com/docs/federation/entities/#resolving
"""
type Customer
  @join__owner(graph: CUSTOMERS)
  @join__type(graph: CUSTOMERS, key: "id")
{
  id: ID! @join__field(graph: CUSTOMERS)
  email: String @join__field(graph: CUSTOMERS)
  contactNumber: String @join__field(graph: CUSTOMERS)
}

"""Here are some helpful details about your type"""
type DeliveryEstimates {
  estimatedDelivery: String
  fastestDelivery: String
}

type Department {
  category: ProductCategory
  url: String
}

scalar join__FieldSet

enum join__Graph {
  CUSTOMERS @join__graph(name: "customers" url: "https://eg3jdhe3zl.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
  INVENTORY @join__graph(name: "inventory" url: "https://2lc1ekf3dd.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
  LOCATIONS @join__graph(name: "locations" url: "https://1kmwbtxfr4.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
  ORDERS @join__graph(name: "orders" url: "https://nem23xx1vd.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
  PRODUCTS @join__graph(name: "products" url: "https://7bssbnldib.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
  REVIEWS @join__graph(name: "reviews" url: "https://w0jtezo2pa.execute-api.us-east-1.amazonaws.com/%GATEWAY_ENV%/graphql")
}

type LineItem {
  product: Product
  dealPrice: Money
  quantityOrdered: Int
  stockedFrom: ApproxLocation
}

type Money {
  amount: Float
  currencyCode: CURRENCY_CODE
}

type Order
  @join__owner(graph: ORDERS)
  @join__type(graph: ORDERS, key: "id")
  @join__type(graph: INVENTORY, key: "id")
{
  id: ID! @join__field(graph: ORDERS)
  status: ORDER_STATUS @join__field(graph: ORDERS)
  items: [LineItem] @join__field(graph: ORDERS)
  phoneNotifications: String @join__field(graph: ORDERS)
  cancelledReason: CANCELLED_REASON @join__field(graph: ORDERS)
  origin: Warehouse @join__field(graph: INVENTORY)
}

enum ORDER_STATUS {
  OPEN
  IN_PROGRESS
  SHIPPING
  PARTIALLY_FULFILLED
  FULFILLED
  RETURNED
  CANCELLED
}

"""Here are some helpful details about your type"""
type Price {
  cost: Money

  """A number between 0 and 1 signifying the % discount"""
  deal: Float
  dealSavings: Money
}

"""
This is an Entity, docs:https://www.apollographql.com/docs/federation/entities/
You will need to define a __resolveReference resolver for the type you define, docs: https://www.apollographql.com/docs/federation/entities/#resolving
"""
type Product
  @join__owner(graph: PRODUCTS)
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: REVIEWS, key: "id")
  @join__type(graph: ORDERS, key: "id")
  @join__type(graph: INVENTORY, key: "id")
{
  id: ID! @join__field(graph: PRODUCTS)
  title: String @join__field(graph: PRODUCTS)
  url: String @join__field(graph: PRODUCTS)
  description: String @join__field(graph: PRODUCTS)
  price: Price @join__field(graph: PRODUCTS)
  salesRank(category: ProductCategory = ALL): Int @join__field(graph: PRODUCTS)
  salesRankOverall: Int @join__field(graph: PRODUCTS)
  salesRankInCategory: Int @join__field(graph: PRODUCTS)
  category: ProductCategory @join__field(graph: PRODUCTS)
  images(size: Int = 1000): [String] @join__field(graph: PRODUCTS)
  primaryImage(size: Int = 1000): String @join__field(graph: PRODUCTS)
  reviews: [Review] @join__field(graph: REVIEWS)
  reviewSummary: ReviewSummary @join__field(graph: REVIEWS)
  inventory: Int @join__field(graph: INVENTORY)
  delivery(deliveryZipCode: Int): DeliveryEstimates @join__field(graph: INVENTORY)
}

enum ProductCategory {
  ALL
  GIFT_CARDS
  ELECTRONICS
  CAMERA_N_PHOTO
  VIDEO_GAMES
  BOOKS
  CLOTHING
}

type ProductInventory {
  quantityOnHand: Int
}

type Query {
  bestSellers(category: ProductCategory = ALL): [Product] @join__field(graph: PRODUCTS)
  categories: [Department] @join__field(graph: PRODUCTS)
  product(id: ID!): Product @join__field(graph: PRODUCTS)
  me: Customer @join__field(graph: CUSTOMERS)
}

"""
This is an Entity, docs:https://www.apollographql.com/docs/federation/entities/
You will need to define a __resolveReference resolver for the type you define, docs: https://www.apollographql.com/docs/federation/entities/#resolving
"""
type Review
  @join__owner(graph: REVIEWS)
  @join__type(graph: REVIEWS, key: "id")
{
  id: ID! @join__field(graph: REVIEWS)
  rating: Float @join__field(graph: REVIEWS)
  content: String @join__field(graph: REVIEWS)
}

type ReviewSummary {
  totalReviews: Int
  averageRating: Float
}

type Warehouse
  @join__owner(graph: INVENTORY)
  @join__type(graph: INVENTORY, key: "id")
  @join__type(graph: ORDERS, key: "id")
{
  id: ID! @join__field(graph: INVENTORY)
  aisles: [Aisle] @join__field(graph: INVENTORY)
}
